import mail from '@sendgrid/mail';
import { NextApiRequest, NextApiResponse } from 'next';

mail.setApiKey(`SG.c7vSz__eSCCET77wQTsiIg.xridvcZHoEv0Q00SeWaSTsJu5E0BMZF-wPW--d1_gCs`);

// eslint-disable-next-line import/no-anonymous-default-export
export default async (req: NextApiRequest, res: NextApiResponse) => {
    const body = req.body;

    const message = `
    Name: ${body.name}\r\n
    Email: ${body.email}\r\n
  `;

  const fileDoc = ``

    const data = {
        to: body.email,
        from: 'bizler.group@gmail.com',
        subject: `Коммерческий лист от New Era для ${body.name}`,
        text: message,
        html: message.replace(/\r\n/g, '<br />'),
        attachments: [
            {
              content: fileDoc,
              filename: 'list.docx',
              type: 'application/msword',
              disposition: 'attachment',
              content_id: 'mytext',
            },
          ],
    };

    await mail.send(data).then(() => {
        console.log('Email sent')
        res.status(200).json({ status: 'OK' });
    })
        .catch((error) => {
            console.error(error)
            res.status(400).json({ message: error });
        });
};
